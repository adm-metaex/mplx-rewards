/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  map,
  publicKey as publicKeySerializer,
  struct,
  u128,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { AccountType, AccountTypeArgs, getAccountTypeSerializer } from '.';

export type RewardVault = {
  accountType: AccountType;
  tokenAccountBump: number;
  rewardMint: PublicKey;
  indexWithPrecision: bigint;
  weightedStakeDiffs: Map<bigint, bigint>;
  cumulativeIndex: Map<bigint, bigint>;
  distributionEndsAt: bigint;
  tokensAvailableForDistribution: bigint;
};

export type RewardVaultArgs = {
  accountType: AccountTypeArgs;
  tokenAccountBump: number;
  rewardMint: PublicKey;
  indexWithPrecision: number | bigint;
  weightedStakeDiffs: Map<number | bigint, number | bigint>;
  cumulativeIndex: Map<number | bigint, number | bigint>;
  distributionEndsAt: number | bigint;
  tokensAvailableForDistribution: number | bigint;
};

export function getRewardVaultSerializer(): Serializer<
  RewardVaultArgs,
  RewardVault
> {
  return struct<RewardVault>(
    [
      ['accountType', getAccountTypeSerializer()],
      ['tokenAccountBump', u8()],
      ['rewardMint', publicKeySerializer()],
      ['indexWithPrecision', u128()],
      ['weightedStakeDiffs', map(u64(), u64())],
      ['cumulativeIndex', map(u64(), u128())],
      ['distributionEndsAt', u64()],
      ['tokensAvailableForDistribution', u64()],
    ],
    { description: 'RewardVault' }
  ) as Serializer<RewardVaultArgs, RewardVault>;
}
