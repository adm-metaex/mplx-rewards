/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  u64,
  unit,
} from '@metaplex-foundation/umi/serializers';
import { LockupPeriod, LockupPeriodArgs, getLockupPeriodSerializer } from '.';

export type RewardsInstruction =
  | {
      __kind: 'InitializePool';
      depositAuthority: PublicKey;
      fillAuthority: PublicKey;
      distributeAuthority: PublicKey;
    }
  | { __kind: 'FillVault'; amount: bigint; distributionEndsAt: bigint }
  | { __kind: 'InitializeMining'; miningOwner: PublicKey }
  | {
      __kind: 'DepositMining';
      amount: bigint;
      lockupPeriod: LockupPeriod;
      owner: PublicKey;
    }
  | { __kind: 'WithdrawMining'; amount: bigint; owner: PublicKey }
  | { __kind: 'Claim' }
  | {
      __kind: 'RestakeDeposit';
      oldLockupPeriod: LockupPeriod;
      newLockupPeriod: LockupPeriod;
      depositStartTs: bigint;
      baseAmount: bigint;
      additionalAmount: bigint;
      miningOwner: PublicKey;
    }
  | { __kind: 'DistributeRewards' };

export type RewardsInstructionArgs =
  | {
      __kind: 'InitializePool';
      depositAuthority: PublicKey;
      fillAuthority: PublicKey;
      distributeAuthority: PublicKey;
    }
  | {
      __kind: 'FillVault';
      amount: number | bigint;
      distributionEndsAt: number | bigint;
    }
  | { __kind: 'InitializeMining'; miningOwner: PublicKey }
  | {
      __kind: 'DepositMining';
      amount: number | bigint;
      lockupPeriod: LockupPeriodArgs;
      owner: PublicKey;
    }
  | { __kind: 'WithdrawMining'; amount: number | bigint; owner: PublicKey }
  | { __kind: 'Claim' }
  | {
      __kind: 'RestakeDeposit';
      oldLockupPeriod: LockupPeriodArgs;
      newLockupPeriod: LockupPeriodArgs;
      depositStartTs: number | bigint;
      baseAmount: number | bigint;
      additionalAmount: number | bigint;
      miningOwner: PublicKey;
    }
  | { __kind: 'DistributeRewards' };

export function getRewardsInstructionSerializer(): Serializer<
  RewardsInstructionArgs,
  RewardsInstruction
> {
  return dataEnum<RewardsInstruction>(
    [
      [
        'InitializePool',
        struct<GetDataEnumKindContent<RewardsInstruction, 'InitializePool'>>([
          ['depositAuthority', publicKeySerializer()],
          ['fillAuthority', publicKeySerializer()],
          ['distributeAuthority', publicKeySerializer()],
        ]),
      ],
      [
        'FillVault',
        struct<GetDataEnumKindContent<RewardsInstruction, 'FillVault'>>([
          ['amount', u64()],
          ['distributionEndsAt', u64()],
        ]),
      ],
      [
        'InitializeMining',
        struct<GetDataEnumKindContent<RewardsInstruction, 'InitializeMining'>>([
          ['miningOwner', publicKeySerializer()],
        ]),
      ],
      [
        'DepositMining',
        struct<GetDataEnumKindContent<RewardsInstruction, 'DepositMining'>>([
          ['amount', u64()],
          ['lockupPeriod', getLockupPeriodSerializer()],
          ['owner', publicKeySerializer()],
        ]),
      ],
      [
        'WithdrawMining',
        struct<GetDataEnumKindContent<RewardsInstruction, 'WithdrawMining'>>([
          ['amount', u64()],
          ['owner', publicKeySerializer()],
        ]),
      ],
      ['Claim', unit()],
      [
        'RestakeDeposit',
        struct<GetDataEnumKindContent<RewardsInstruction, 'RestakeDeposit'>>([
          ['oldLockupPeriod', getLockupPeriodSerializer()],
          ['newLockupPeriod', getLockupPeriodSerializer()],
          ['depositStartTs', u64()],
          ['baseAmount', u64()],
          ['additionalAmount', u64()],
          ['miningOwner', publicKeySerializer()],
        ]),
      ],
      ['DistributeRewards', unit()],
    ],
    { description: 'RewardsInstruction' }
  ) as Serializer<RewardsInstructionArgs, RewardsInstruction>;
}

// Data Enum Helpers.
export function rewardsInstruction(
  kind: 'InitializePool',
  data: GetDataEnumKindContent<RewardsInstructionArgs, 'InitializePool'>
): GetDataEnumKind<RewardsInstructionArgs, 'InitializePool'>;
export function rewardsInstruction(
  kind: 'FillVault',
  data: GetDataEnumKindContent<RewardsInstructionArgs, 'FillVault'>
): GetDataEnumKind<RewardsInstructionArgs, 'FillVault'>;
export function rewardsInstruction(
  kind: 'InitializeMining',
  data: GetDataEnumKindContent<RewardsInstructionArgs, 'InitializeMining'>
): GetDataEnumKind<RewardsInstructionArgs, 'InitializeMining'>;
export function rewardsInstruction(
  kind: 'DepositMining',
  data: GetDataEnumKindContent<RewardsInstructionArgs, 'DepositMining'>
): GetDataEnumKind<RewardsInstructionArgs, 'DepositMining'>;
export function rewardsInstruction(
  kind: 'WithdrawMining',
  data: GetDataEnumKindContent<RewardsInstructionArgs, 'WithdrawMining'>
): GetDataEnumKind<RewardsInstructionArgs, 'WithdrawMining'>;
export function rewardsInstruction(
  kind: 'Claim'
): GetDataEnumKind<RewardsInstructionArgs, 'Claim'>;
export function rewardsInstruction(
  kind: 'RestakeDeposit',
  data: GetDataEnumKindContent<RewardsInstructionArgs, 'RestakeDeposit'>
): GetDataEnumKind<RewardsInstructionArgs, 'RestakeDeposit'>;
export function rewardsInstruction(
  kind: 'DistributeRewards'
): GetDataEnumKind<RewardsInstructionArgs, 'DistributeRewards'>;
export function rewardsInstruction<K extends RewardsInstructionArgs['__kind']>(
  kind: K,
  data?: any
): Extract<RewardsInstructionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isRewardsInstruction<K extends RewardsInstruction['__kind']>(
  kind: K,
  value: RewardsInstruction
): value is RewardsInstruction & { __kind: K } {
  return value.__kind === kind;
}
