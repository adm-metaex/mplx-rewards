/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  struct,
  u128,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Mining = Account<MiningAccountData>;

export type MiningAccountData = {
  rewardPool: PublicKey;
  owner: PublicKey;
  rewardMint: PublicKey;
  indexWithPrecision: bigint;
  share: bigint;
  unclaimedRewards: bigint;
  stakeFromOthers: bigint;
  bump: number;
  data: Array<number>;
};

export type MiningAccountDataArgs = {
  rewardPool: PublicKey;
  owner: PublicKey;
  rewardMint: PublicKey;
  indexWithPrecision: number | bigint;
  share: number | bigint;
  unclaimedRewards: number | bigint;
  stakeFromOthers: number | bigint;
  bump: number;
  data: Array<number>;
};

export function getMiningAccountDataSerializer(): Serializer<
  MiningAccountDataArgs,
  MiningAccountData
> {
  return struct<MiningAccountData>(
    [
      ['rewardPool', publicKeySerializer()],
      ['owner', publicKeySerializer()],
      ['rewardMint', publicKeySerializer()],
      ['indexWithPrecision', u128()],
      ['share', u64()],
      ['unclaimedRewards', u64()],
      ['stakeFromOthers', u64()],
      ['bump', u8()],
      ['data', array(u8(), { size: 7 })],
    ],
    { description: 'MiningAccountData' }
  ) as Serializer<MiningAccountDataArgs, MiningAccountData>;
}

export function deserializeMining(rawAccount: RpcAccount): Mining {
  return deserializeAccount(rawAccount, getMiningAccountDataSerializer());
}

export async function fetchMining(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Mining> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Mining');
  return deserializeMining(maybeAccount);
}

export async function safeFetchMining(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Mining | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMining(maybeAccount) : null;
}

export async function fetchAllMining(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Mining[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Mining');
    return deserializeMining(maybeAccount);
  });
}

export async function safeFetchAllMining(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Mining[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMining(maybeAccount as RpcAccount));
}

export function getMiningGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplxRewards',
    'BF5PatmRTQDgEKoXR7iHRbkibEEi83nVM38cUKWzQcTR'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      rewardPool: PublicKey;
      owner: PublicKey;
      rewardMint: PublicKey;
      indexWithPrecision: number | bigint;
      share: number | bigint;
      unclaimedRewards: number | bigint;
      stakeFromOthers: number | bigint;
      bump: number;
      data: Array<number>;
    }>({
      rewardPool: [0, publicKeySerializer()],
      owner: [32, publicKeySerializer()],
      rewardMint: [64, publicKeySerializer()],
      indexWithPrecision: [96, u128()],
      share: [112, u64()],
      unclaimedRewards: [120, u64()],
      stakeFromOthers: [128, u64()],
      bump: [136, u8()],
      data: [137, array(u8(), { size: 7 })],
    })
    .deserializeUsing<Mining>((account) => deserializeMining(account));
}

export function getMiningSize(): number {
  return 144;
}
