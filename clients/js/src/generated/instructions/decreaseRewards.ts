/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DecreaseRewardsInstructionAccounts = {
  /** The address of the Staking program's Registrar, which is PDA and is responsible for signing CPIs */
  depositAuthority: Signer;
  /** The address of the reward pool */
  rewardPool: PublicKey | Pda;
  /** The address of the mining account which belongs to the user and stores info about user's rewards */
  mining: PublicKey | Pda;
};

// Data.
export type DecreaseRewardsInstructionData = {
  discriminator: number;
  miningOwner: PublicKey;
  decreasedWeightedStakeNumber: bigint;
};

export type DecreaseRewardsInstructionDataArgs = {
  miningOwner: PublicKey;
  decreasedWeightedStakeNumber: number | bigint;
};

export function getDecreaseRewardsInstructionDataSerializer(): Serializer<
  DecreaseRewardsInstructionDataArgs,
  DecreaseRewardsInstructionData
> {
  return mapSerializer<
    DecreaseRewardsInstructionDataArgs,
    any,
    DecreaseRewardsInstructionData
  >(
    struct<DecreaseRewardsInstructionData>(
      [
        ['discriminator', u8()],
        ['miningOwner', publicKeySerializer()],
        ['decreasedWeightedStakeNumber', u64()],
      ],
      { description: 'DecreaseRewardsInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 11 })
  ) as Serializer<
    DecreaseRewardsInstructionDataArgs,
    DecreaseRewardsInstructionData
  >;
}

// Args.
export type DecreaseRewardsInstructionArgs = DecreaseRewardsInstructionDataArgs;

// Instruction.
export function decreaseRewards(
  context: Pick<Context, 'programs'>,
  input: DecreaseRewardsInstructionAccounts & DecreaseRewardsInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplxRewards',
    'BF5PatmRTQDgEKoXR7iHRbkibEEi83nVM38cUKWzQcTR'
  );

  // Accounts.
  const resolvedAccounts = {
    depositAuthority: {
      index: 0,
      isWritable: false as boolean,
      value: input.depositAuthority ?? null,
    },
    rewardPool: {
      index: 1,
      isWritable: true as boolean,
      value: input.rewardPool ?? null,
    },
    mining: {
      index: 2,
      isWritable: true as boolean,
      value: input.mining ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: DecreaseRewardsInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDecreaseRewardsInstructionDataSerializer().serialize(
    resolvedArgs as DecreaseRewardsInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
