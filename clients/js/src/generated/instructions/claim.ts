/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ClaimInstructionAccounts = {
  /** The address of the reward pool */
  rewardPool: PublicKey | Pda;
  /** The address of the reward mint */
  rewardMint: PublicKey | Pda;
  /** The address of the reward vault */
  vault: PublicKey | Pda;
  /** The address of the mining account which belongs to the user and stores info about user's rewards */
  mining: PublicKey | Pda;
  /** The end user the mining accounts belongs to */
  miningOwner: Signer;
  /** The address of the Staking program's Registrar, which is PDA and is responsible for signing CPIs */
  depositAuthority: Signer;
  /** ATA where tokens will be claimed to */
  miningOwnerRewardTokenAccount: PublicKey | Pda;
  /** The address of the Token program where rewards are minted */
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type ClaimInstructionData = { discriminator: number };

export type ClaimInstructionDataArgs = {};

export function getClaimInstructionDataSerializer(): Serializer<
  ClaimInstructionDataArgs,
  ClaimInstructionData
> {
  return mapSerializer<ClaimInstructionDataArgs, any, ClaimInstructionData>(
    struct<ClaimInstructionData>([['discriminator', u8()]], {
      description: 'ClaimInstructionData',
    }),
    (value) => ({ ...value, discriminator: 5 })
  ) as Serializer<ClaimInstructionDataArgs, ClaimInstructionData>;
}

// Instruction.
export function claim(
  context: Pick<Context, 'programs'>,
  input: ClaimInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplxRewards',
    'BF5PatmRTQDgEKoXR7iHRbkibEEi83nVM38cUKWzQcTR'
  );

  // Accounts.
  const resolvedAccounts = {
    rewardPool: {
      index: 0,
      isWritable: false as boolean,
      value: input.rewardPool ?? null,
    },
    rewardMint: {
      index: 1,
      isWritable: false as boolean,
      value: input.rewardMint ?? null,
    },
    vault: {
      index: 2,
      isWritable: true as boolean,
      value: input.vault ?? null,
    },
    mining: {
      index: 3,
      isWritable: true as boolean,
      value: input.mining ?? null,
    },
    miningOwner: {
      index: 4,
      isWritable: false as boolean,
      value: input.miningOwner ?? null,
    },
    depositAuthority: {
      index: 5,
      isWritable: false as boolean,
      value: input.depositAuthority ?? null,
    },
    miningOwnerRewardTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.miningOwnerRewardTokenAccount ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getClaimInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
