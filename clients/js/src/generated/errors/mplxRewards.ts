/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidAccountOwner: Input account owner */
export class InvalidAccountOwnerError extends ProgramError {
  override readonly name: string = 'InvalidAccountOwner';

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super('Input account owner', program, cause);
  }
}
codeToErrorMap.set(0x0, InvalidAccountOwnerError);
nameToErrorMap.set('InvalidAccountOwner', InvalidAccountOwnerError);

/** MathOverflow: Math operation overflow */
export class MathOverflowError extends ProgramError {
  override readonly name: string = 'MathOverflow';

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super('Math operation overflow', program, cause);
  }
}
codeToErrorMap.set(0x1, MathOverflowError);
nameToErrorMap.set('MathOverflow', MathOverflowError);

/** RewardsNoDeposits: Rewards: No deposits */
export class RewardsNoDepositsError extends ProgramError {
  override readonly name: string = 'RewardsNoDeposits';

  readonly code: number = 0x2; // 2

  constructor(program: Program, cause?: Error) {
    super('Rewards: No deposits', program, cause);
  }
}
codeToErrorMap.set(0x2, RewardsNoDepositsError);
nameToErrorMap.set('RewardsNoDeposits', RewardsNoDepositsError);

/** InvalidLockupPeriod: Rewards: lockup period invalid */
export class InvalidLockupPeriodError extends ProgramError {
  override readonly name: string = 'InvalidLockupPeriod';

  readonly code: number = 0x3; // 3

  constructor(program: Program, cause?: Error) {
    super('Rewards: lockup period invalid', program, cause);
  }
}
codeToErrorMap.set(0x3, InvalidLockupPeriodError);
nameToErrorMap.set('InvalidLockupPeriod', InvalidLockupPeriodError);

/** DistributionInThePast: Rewards: distribution_ends_at date is lower than current date  */
export class DistributionInThePastError extends ProgramError {
  override readonly name: string = 'DistributionInThePast';

  readonly code: number = 0x4; // 4

  constructor(program: Program, cause?: Error) {
    super(
      'Rewards: distribution_ends_at date is lower than current date ',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x4, DistributionInThePastError);
nameToErrorMap.set('DistributionInThePast', DistributionInThePastError);

/** InvalidPrimitiveTypesConversion: Rewards: distribution_ends_at date is lower than current date  */
export class InvalidPrimitiveTypesConversionError extends ProgramError {
  override readonly name: string = 'InvalidPrimitiveTypesConversion';

  readonly code: number = 0x5; // 5

  constructor(program: Program, cause?: Error) {
    super(
      'Rewards: distribution_ends_at date is lower than current date ',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x5, InvalidPrimitiveTypesConversionError);
nameToErrorMap.set(
  'InvalidPrimitiveTypesConversion',
  InvalidPrimitiveTypesConversionError
);

/** RewardsMustBeClaimed: Rewards: unclaimed rewards must be claimed */
export class RewardsMustBeClaimedError extends ProgramError {
  override readonly name: string = 'RewardsMustBeClaimed';

  readonly code: number = 0xb; // 11

  constructor(program: Program, cause?: Error) {
    super('Rewards: unclaimed rewards must be claimed', program, cause);
  }
}
codeToErrorMap.set(0xb, RewardsMustBeClaimedError);
nameToErrorMap.set('RewardsMustBeClaimed', RewardsMustBeClaimedError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getMplxRewardsErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getMplxRewardsErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
