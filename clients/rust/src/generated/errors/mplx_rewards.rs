//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MplxRewardsError {
    /// 0 (0x0) - Input account owner
    #[error("Input account owner")]
    InvalidAccountOwner,
    /// 1 (0x1) - Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow,
    /// 2 (0x2) - Zero amount
    #[error("Zero amount")]
    ZeroAmount,
    /// 3 (0x3) - Rewards: Invalid vault
    #[error("Rewards: Invalid vault")]
    RewardsInvalidVault,
    /// 4 (0x4) - Rewards: No deposits
    #[error("Rewards: No deposits")]
    RewardsNoDeposits,
    /// 5 (0x5) - Rebalancing: liquidity check failed
    #[error("Rebalancing: liquidity check failed")]
    RebalanceLiquidityCheckFailed,
    /// 6 (0x6) - Rewards: index receiving failed
    #[error("Rewards: index receiving failed")]
    IndexMustExist,
    /// 7 (0x7) - Rewards: lockup period invalid
    #[error("Rewards: lockup period invalid")]
    InvalidLockupPeriod,
    /// 8 (0x8) - Rewards: only Staking contract is allowed to do CPI calls
    #[error("Rewards: only Staking contract is allowed to do CPI calls")]
    InvalidCpiCaller,
    /// 9 (0x9) - Rewards: distribution_ends_at date is lower than current date
    #[error("Rewards: distribution_ends_at date is lower than current date ")]
    DistributionInThePast,
    /// 10 (0xA) - Rewards: distribution_ends_at date is lower than current date
    #[error("Rewards: distribution_ends_at date is lower than current date ")]
    InvalidPrimitiveTypesConversion,
    /// 11 (0xB) - Rewards: unclaimed rewards must be claimed
    #[error("Rewards: unclaimed rewards must be claimed")]
    RewardsMustBeClaimed,
}

impl solana_program::program_error::PrintProgramError for MplxRewardsError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
