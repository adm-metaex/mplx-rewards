//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct CloseMining {
    /// The address of the user's mining account
    pub mining: solana_program::pubkey::Pubkey,
    /// The end user the mining accounts belongs to
    pub mining_owner: solana_program::pubkey::Pubkey,
    /// The address where lamports from account closing will be transferred
    pub target_account: solana_program::pubkey::Pubkey,

    pub deposit_authority: solana_program::pubkey::Pubkey,
    /// The address of the reward pool
    pub reward_pool: solana_program::pubkey::Pubkey,
}

impl CloseMining {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mining,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mining_owner,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.target_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.deposit_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reward_pool,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = CloseMiningInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::MPLX_REWARDS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct CloseMiningInstructionData {
    discriminator: u8,
}

impl CloseMiningInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 8 }
    }
}

/// Instruction builder for `CloseMining`.
///
/// ### Accounts:
///
///   0. `[]` mining
///   1. `[signer]` mining_owner
///   2. `[writable]` target_account
///   3. `[signer]` deposit_authority
///   4. `[writable]` reward_pool
#[derive(Default)]
pub struct CloseMiningBuilder {
    mining: Option<solana_program::pubkey::Pubkey>,
    mining_owner: Option<solana_program::pubkey::Pubkey>,
    target_account: Option<solana_program::pubkey::Pubkey>,
    deposit_authority: Option<solana_program::pubkey::Pubkey>,
    reward_pool: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CloseMiningBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The address of the user's mining account
    #[inline(always)]
    pub fn mining(&mut self, mining: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mining = Some(mining);
        self
    }
    /// The end user the mining accounts belongs to
    #[inline(always)]
    pub fn mining_owner(&mut self, mining_owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mining_owner = Some(mining_owner);
        self
    }
    /// The address where lamports from account closing will be transferred
    #[inline(always)]
    pub fn target_account(&mut self, target_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.target_account = Some(target_account);
        self
    }
    #[inline(always)]
    pub fn deposit_authority(
        &mut self,
        deposit_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.deposit_authority = Some(deposit_authority);
        self
    }
    /// The address of the reward pool
    #[inline(always)]
    pub fn reward_pool(&mut self, reward_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reward_pool = Some(reward_pool);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CloseMining {
            mining: self.mining.expect("mining is not set"),
            mining_owner: self.mining_owner.expect("mining_owner is not set"),
            target_account: self.target_account.expect("target_account is not set"),
            deposit_authority: self
                .deposit_authority
                .expect("deposit_authority is not set"),
            reward_pool: self.reward_pool.expect("reward_pool is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `close_mining` CPI accounts.
pub struct CloseMiningCpiAccounts<'a, 'b> {
    /// The address of the user's mining account
    pub mining: &'b solana_program::account_info::AccountInfo<'a>,
    /// The end user the mining accounts belongs to
    pub mining_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address where lamports from account closing will be transferred
    pub target_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub deposit_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the reward pool
    pub reward_pool: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `close_mining` CPI instruction.
pub struct CloseMiningCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the user's mining account
    pub mining: &'b solana_program::account_info::AccountInfo<'a>,
    /// The end user the mining accounts belongs to
    pub mining_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address where lamports from account closing will be transferred
    pub target_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub deposit_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the reward pool
    pub reward_pool: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CloseMiningCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CloseMiningCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            mining: accounts.mining,
            mining_owner: accounts.mining_owner,
            target_account: accounts.target_account,
            deposit_authority: accounts.deposit_authority,
            reward_pool: accounts.reward_pool,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mining.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mining_owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.target_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.deposit_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reward_pool.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = CloseMiningInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPLX_REWARDS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mining.clone());
        account_infos.push(self.mining_owner.clone());
        account_infos.push(self.target_account.clone());
        account_infos.push(self.deposit_authority.clone());
        account_infos.push(self.reward_pool.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CloseMining` via CPI.
///
/// ### Accounts:
///
///   0. `[]` mining
///   1. `[signer]` mining_owner
///   2. `[writable]` target_account
///   3. `[signer]` deposit_authority
///   4. `[writable]` reward_pool
pub struct CloseMiningCpiBuilder<'a, 'b> {
    instruction: Box<CloseMiningCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseMiningCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CloseMiningCpiBuilderInstruction {
            __program: program,
            mining: None,
            mining_owner: None,
            target_account: None,
            deposit_authority: None,
            reward_pool: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The address of the user's mining account
    #[inline(always)]
    pub fn mining(
        &mut self,
        mining: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mining = Some(mining);
        self
    }
    /// The end user the mining accounts belongs to
    #[inline(always)]
    pub fn mining_owner(
        &mut self,
        mining_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mining_owner = Some(mining_owner);
        self
    }
    /// The address where lamports from account closing will be transferred
    #[inline(always)]
    pub fn target_account(
        &mut self,
        target_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.target_account = Some(target_account);
        self
    }
    #[inline(always)]
    pub fn deposit_authority(
        &mut self,
        deposit_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.deposit_authority = Some(deposit_authority);
        self
    }
    /// The address of the reward pool
    #[inline(always)]
    pub fn reward_pool(
        &mut self,
        reward_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward_pool = Some(reward_pool);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CloseMiningCpi {
            __program: self.instruction.__program,

            mining: self.instruction.mining.expect("mining is not set"),

            mining_owner: self
                .instruction
                .mining_owner
                .expect("mining_owner is not set"),

            target_account: self
                .instruction
                .target_account
                .expect("target_account is not set"),

            deposit_authority: self
                .instruction
                .deposit_authority
                .expect("deposit_authority is not set"),

            reward_pool: self
                .instruction
                .reward_pool
                .expect("reward_pool is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct CloseMiningCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    mining: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mining_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    target_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    deposit_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reward_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
